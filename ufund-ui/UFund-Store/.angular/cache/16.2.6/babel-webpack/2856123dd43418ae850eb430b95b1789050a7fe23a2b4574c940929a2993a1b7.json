{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    //TODO replace with login backend elements\n    this.users = [{\n      id: 1,\n      name: 'Admin',\n      username: 'admin'\n    }, {\n      id: 2,\n      name: 'Sam',\n      username: 'sam'\n    }, {\n      id: 3,\n      name: 'Kelvin',\n      username: 'kelvin'\n    }, {\n      id: 4,\n      name: 'Helper',\n      username: 'helper'\n    }];\n    this.accountsUrl = 'http://localhost:8080/account'; // URL to web api\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  login(username) {\n    let user = this.users.find(u => u.username === username);\n    if (user) {\n      this.session = user;\n      localStorage.setItem('session', JSON.stringify(this.session));\n    }\n    return user;\n  }\n  createUser(username) {\n    return this.http.post(this.accountsUrl, username, this.httpOptions).pipe(tap(newAccount => catchError(this.handleError('createUser'))));\n  }\n  handleError(operation = 'operation', result) {\n    return error => {\n      TODO: send;\n      the;\n      error;\n      to;\n      remote;\n      logging;\n      infrastructure;\n      console.error(error); // log to console instead\n      //Let the app keep running by returning an empty result.\n      return of(result);\n    };\n    //}\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","of","catchError","tap","AuthService","constructor","users","id","name","username","accountsUrl","httpOptions","headers","login","user","find","u","session","localStorage","setItem","JSON","stringify","createUser","http","post","pipe","newAccount","handleError","operation","result","error","TODO","send","the","to","remote","logging","infrastructure","console","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\samue\\SWEN261\\team-project-2231-swen-261-07-7-g-fundsinhighplaces\\ufund-ui\\UFund-Store\\src\\app\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http'\r\n\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\n\r\nimport { Account } from './account';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  //TODO replace with login backend elements\r\n  users: any[] = [\r\n    {\r\n      id: 1,\r\n      name: 'Admin',\r\n      username: 'admin'\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'Sam',\r\n      username: 'sam'\r\n    },\r\n    {\r\n      id: 3,\r\n      name: 'Kelvin',\r\n      username: 'kelvin'\r\n    },\r\n    {\r\n      id: 4,\r\n      name: 'Helper',\r\n      username: 'helper'\r\n    }\r\n  ];\r\n\r\n  private accountsUrl = 'http://localhost:8080/account';  // URL to web api\r\n\r\n  httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n  };\r\n\r\n  session: any;\r\n\r\n  constructor(\r\n    //private http: HttpClient\r\n    ) { }\r\n\r\n  login(username: string){\r\n    let user = this.users.find((u)=>u.username===username);\r\n    if(user){\r\n      this.session = user;\r\n      localStorage.setItem('session', JSON.stringify(this.session))\r\n    }\r\n    return user;\r\n  }\r\n\r\n  createUser(username: string): Observable<Account> {\r\n    return this.http.post<Account>(this.accountsUrl, username, this.httpOptions).pipe(\r\n      tap((newAccount: Account) =>\r\n      catchError(this.handleError<string>('createUser'))\r\n    ));\r\n  }\r\n\r\n  private handleError<T>(operation = 'operation', result?: T) {\r\n    return (error: any): Observable<T> => {\r\n\r\n       TODO: send the error to remote logging infrastructure\r\n      console.error(error); // log to console instead\r\n\r\n      //Let the app keep running by returning an empty result.\r\n      return of(result as T);\r\n    }\r\n  //}\r\n\r\n}\r\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAAqBC,EAAE,QAAQ,MAAM;AACrC,SAASC,UAAU,EAAOC,GAAG,QAAQ,gBAAgB;;AAOrD,OAAM,MAAOC,WAAW;EAiCtBC,YAAA;IAhCA;IACA,KAAAC,KAAK,GAAU,CACb;MACEC,EAAE,EAAE,CAAC;MACLC,IAAI,EAAE,OAAO;MACbC,QAAQ,EAAE;KACX,EACD;MACEF,EAAE,EAAE,CAAC;MACLC,IAAI,EAAE,KAAK;MACXC,QAAQ,EAAE;KACX,EACD;MACEF,EAAE,EAAE,CAAC;MACLC,IAAI,EAAE,QAAQ;MACdC,QAAQ,EAAE;KACX,EACD;MACEF,EAAE,EAAE,CAAC;MACLC,IAAI,EAAE,QAAQ;MACdC,QAAQ,EAAE;KACX,CACF;IAEO,KAAAC,WAAW,GAAG,+BAA+B,CAAC,CAAE;IAExD,KAAAC,WAAW,GAAG;MACZC,OAAO,EAAE,IAAIZ,WAAW,CAAC;QAAE,cAAc,EAAE;MAAkB,CAAE;KAChE;EAMK;EAENa,KAAKA,CAACJ,QAAgB;IACpB,IAAIK,IAAI,GAAG,IAAI,CAACR,KAAK,CAACS,IAAI,CAAEC,CAAC,IAAGA,CAAC,CAACP,QAAQ,KAAGA,QAAQ,CAAC;IACtD,IAAGK,IAAI,EAAC;MACN,IAAI,CAACG,OAAO,GAAGH,IAAI;MACnBI,YAAY,CAACC,OAAO,CAAC,SAAS,EAAEC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACJ,OAAO,CAAC,CAAC;;IAE/D,OAAOH,IAAI;EACb;EAEAQ,UAAUA,CAACb,QAAgB;IACzB,OAAO,IAAI,CAACc,IAAI,CAACC,IAAI,CAAU,IAAI,CAACd,WAAW,EAAED,QAAQ,EAAE,IAAI,CAACE,WAAW,CAAC,CAACc,IAAI,CAC/EtB,GAAG,CAAEuB,UAAmB,IACxBxB,UAAU,CAAC,IAAI,CAACyB,WAAW,CAAS,YAAY,CAAC,CAAC,CACnD,CAAC;EACJ;EAEQA,WAAWA,CAAIC,SAAS,GAAG,WAAW,EAAEC,MAAU;IACxD,OAAQC,KAAU,IAAmB;MAElCC,IAAI,EAAEC,IAAI;MAACC,GAAG;MAACH,KAAK;MAACI,EAAE;MAACC,MAAM;MAACC,OAAO;MAACC,cAAc;MACtDC,OAAO,CAACR,KAAK,CAACA,KAAK,CAAC,CAAC,CAAC;MAEtB;MACA,OAAO7B,EAAE,CAAC4B,MAAW,CAAC;IACxB,CAAC;IACH;EAEF;EAAC,QAAAU,CAAA,G;qBAhEYnC,WAAW;EAAA;EAAA,QAAAoC,EAAA,G;WAAXpC,WAAW;IAAAqC,OAAA,EAAXrC,WAAW,CAAAsC,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}