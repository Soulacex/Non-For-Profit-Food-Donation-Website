{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.accountUrl = 'http://localhost:8080/acounts'; // URL to web api\n    this.users = [];\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  getAccounts() {\n    return this.http.get(this.accountUrl).pipe(tap(_ => catchError(this.handleError('getHeroes', []))));\n  }\n  createAccount(username) {\n    return this.http.post(this.accountUrl, username, this.httpOptions).pipe(tap(newAccount => catchError(this.handleError('addHero'))));\n  }\n  login(username) {\n    let user = this.users.find(u => u.Username === username);\n    if (user) {\n      this.session = user;\n      localStorage.setItem('session', JSON.stringify(this.session));\n    }\n    return user;\n  }\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","of","catchError","tap","AuthService","constructor","http","accountUrl","users","httpOptions","headers","getAccounts","get","pipe","_","handleError","createAccount","username","post","newAccount","login","user","find","u","Username","session","localStorage","setItem","JSON","stringify","operation","result","error","console","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\samue\\SWEN261\\team-project-2231-swen-261-07-7-g-fundsinhighplaces\\ufund-ui\\UFund-Store\\src\\app\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http'\r\n\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\n\r\nimport { Account } from './account';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private accountUrl = 'http://localhost:8080/acounts';  // URL to web api\r\n  users: Account[] = [];\r\n  session: any;\r\n  \r\n  httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n  };\r\n\r\n  constructor(\r\n    private http: HttpClient) { }\r\n\r\n  getAccounts(): Observable<Account[]>{\r\n    return this.http.get<Account[]>(this.accountUrl)\r\n    .pipe(\r\n      tap(_ => catchError(this.handleError<Account[]>('getHeroes', [])))\r\n    );\r\n  }\r\n\r\n  createAccount(username: string): Observable<Account> {\r\n    return this.http.post<Account>(this.accountUrl, username, this.httpOptions).pipe(\r\n      tap((newAccount: Account) => catchError(this.handleError<Account>('addHero'))));\r\n  }\r\n\r\n  login(username: string){\r\n    let user = this.users.find((u)=>u.Username===username);\r\n    if(user){\r\n      this.session = user;\r\n      localStorage.setItem('session', JSON.stringify(this.session))\r\n    }\r\n    return user;\r\n  }\r\n\r\n\r\n  private handleError<T>(operation = 'operation', result?: T) {\r\n    return (error: any): Observable<T> => {\r\n\r\n      // TODO: send the error to remote logging infrastructure\r\n      console.error(error); // log to console instead\r\n\r\n      // Let the app keep running by returning an empty result.\r\n      return of(result as T);\r\n    };\r\n  }\r\n}\r\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAAqBC,EAAE,QAAQ,MAAM;AACrC,SAASC,UAAU,EAAOC,GAAG,QAAQ,gBAAgB;;;AAOrD,OAAM,MAAOC,WAAW;EAStBC,YACUC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IATN,KAAAC,UAAU,GAAG,+BAA+B,CAAC,CAAE;IACvD,KAAAC,KAAK,GAAc,EAAE;IAGrB,KAAAC,WAAW,GAAG;MACZC,OAAO,EAAE,IAAIV,WAAW,CAAC;QAAE,cAAc,EAAE;MAAkB,CAAE;KAChE;EAG6B;EAE9BW,WAAWA,CAAA;IACT,OAAO,IAAI,CAACL,IAAI,CAACM,GAAG,CAAY,IAAI,CAACL,UAAU,CAAC,CAC/CM,IAAI,CACHV,GAAG,CAACW,CAAC,IAAIZ,UAAU,CAAC,IAAI,CAACa,WAAW,CAAY,WAAW,EAAE,EAAE,CAAC,CAAC,CAAC,CACnE;EACH;EAEAC,aAAaA,CAACC,QAAgB;IAC5B,OAAO,IAAI,CAACX,IAAI,CAACY,IAAI,CAAU,IAAI,CAACX,UAAU,EAAEU,QAAQ,EAAE,IAAI,CAACR,WAAW,CAAC,CAACI,IAAI,CAC9EV,GAAG,CAAEgB,UAAmB,IAAKjB,UAAU,CAAC,IAAI,CAACa,WAAW,CAAU,SAAS,CAAC,CAAC,CAAC,CAAC;EACnF;EAEAK,KAAKA,CAACH,QAAgB;IACpB,IAAII,IAAI,GAAG,IAAI,CAACb,KAAK,CAACc,IAAI,CAAEC,CAAC,IAAGA,CAAC,CAACC,QAAQ,KAAGP,QAAQ,CAAC;IACtD,IAAGI,IAAI,EAAC;MACN,IAAI,CAACI,OAAO,GAAGJ,IAAI;MACnBK,YAAY,CAACC,OAAO,CAAC,SAAS,EAAEC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACJ,OAAO,CAAC,CAAC;;IAE/D,OAAOJ,IAAI;EACb;EAGQN,WAAWA,CAAIe,SAAS,GAAG,WAAW,EAAEC,MAAU;IACxD,OAAQC,KAAU,IAAmB;MAEnC;MACAC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC,CAAC;MAEtB;MACA,OAAO/B,EAAE,CAAC8B,MAAW,CAAC;IACxB,CAAC;EACH;EAAC,QAAAjB,CAAA,G;qBA3CUV,WAAW,EAAA8B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXlC,WAAW;IAAAmC,OAAA,EAAXnC,WAAW,CAAAoC,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}