{"ast":null,"code":"import { of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class NotificationService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:8080';\n  }\n  /**\n   * Create a new notification.\n   * @param notification The notification to be created.\n   * @returns Observable<Notification> representing the created notification.\n   */\n  createNotification(notification) {\n    const url = `${this.baseUrl}/notification/createNotification`;\n    return this.http.post(url, notification).pipe(catchError(this.handleError('createNotification', notification)));\n  }\n  /**\n   * Get a notification by its ID.\n   * @param id The ID of the notification to retrieve.\n   * @returns Observable<Notification> representing the retrieved notification.\n   */\n  getNotificationById(id) {\n    const url = `${this.baseUrl}/notification/${id}`;\n    return this.http.get(url).pipe(catchError(this.handleError('getNotificationById')));\n  }\n  /**\n   * Get all notifications.\n   * @returns Observable<Notification[]> representing an array of all notifications.\n   */\n  getAllNotifications() {\n    const url = `${this.baseUrl}/notification`;\n    return this.http.get(url).pipe(catchError(this.handleError('getAllNotifications', [])));\n  }\n  /**\n   * Handle HTTP errors.\n   * @param operation - Name of the operation that failed.\n   * @param result - Optional value to return as the observable result.\n   * @returns A function that handles HTTP errors and returns an empty result.\n   */\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n  static #_ = this.ɵfac = function NotificationService_Factory(t) {\n    return new (t || NotificationService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NotificationService,\n    factory: NotificationService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["of","catchError","NotificationService","constructor","http","baseUrl","createNotification","notification","url","post","pipe","handleError","getNotificationById","id","get","getAllNotifications","operation","result","error","console","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/Users/soulacex/swen-261/team-project-2231-swen-261-07-7-g-fundsinhighplaces/ufund-ui/UFund-Store/src/app/notification.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Notification } from './notification';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationService {\n  private baseUrl: string = 'http://localhost:8080'; \n\n  constructor(private http: HttpClient) { }\n\n  /**\n   * Create a new notification.\n   * @param notification The notification to be created.\n   * @returns Observable<Notification> representing the created notification.\n   */\n  createNotification(notification: Notification): Observable<Notification> {\n    const url = `${this.baseUrl}/notification/createNotification`;\n    return this.http.post<Notification>(url, notification)\n      .pipe(\n        catchError(this.handleError<Notification>('createNotification', notification))\n      );\n  }\n\n  /**\n   * Get a notification by its ID.\n   * @param id The ID of the notification to retrieve.\n   * @returns Observable<Notification> representing the retrieved notification.\n   */\n  getNotificationById(id: number): Observable<Notification> {\n    const url = `${this.baseUrl}/notification/${id}`;\n    return this.http.get<Notification>(url)\n      .pipe(\n        catchError(this.handleError<Notification>('getNotificationById'))\n      );\n  }\n\n  /**\n   * Get all notifications.\n   * @returns Observable<Notification[]> representing an array of all notifications.\n   */\n  getAllNotifications(): Observable<Notification[]> {\n    const url = `${this.baseUrl}/notification`;\n    return this.http.get<Notification[]>(url)\n      .pipe(\n        catchError(this.handleError<Notification[]>('getAllNotifications', []))\n      );\n  }\n\n  /**\n   * Handle HTTP errors.\n   * @param operation - Name of the operation that failed.\n   * @param result - Optional value to return as the observable result.\n   * @returns A function that handles HTTP errors and returns an empty result.\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n}"],"mappings":"AAEA,SAAqBA,EAAE,QAAQ,MAAM;AACrC,SAASC,UAAU,QAAQ,gBAAgB;;;AAM3C,OAAM,MAAOC,mBAAmB;EAG9BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,OAAO,GAAW,uBAAuB;EAET;EAExC;;;;;EAKAC,kBAAkBA,CAACC,YAA0B;IAC3C,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACH,OAAO,kCAAkC;IAC7D,OAAO,IAAI,CAACD,IAAI,CAACK,IAAI,CAAeD,GAAG,EAAED,YAAY,CAAC,CACnDG,IAAI,CACHT,UAAU,CAAC,IAAI,CAACU,WAAW,CAAe,oBAAoB,EAAEJ,YAAY,CAAC,CAAC,CAC/E;EACL;EAEA;;;;;EAKAK,mBAAmBA,CAACC,EAAU;IAC5B,MAAML,GAAG,GAAG,GAAG,IAAI,CAACH,OAAO,iBAAiBQ,EAAE,EAAE;IAChD,OAAO,IAAI,CAACT,IAAI,CAACU,GAAG,CAAeN,GAAG,CAAC,CACpCE,IAAI,CACHT,UAAU,CAAC,IAAI,CAACU,WAAW,CAAe,qBAAqB,CAAC,CAAC,CAClE;EACL;EAEA;;;;EAIAI,mBAAmBA,CAAA;IACjB,MAAMP,GAAG,GAAG,GAAG,IAAI,CAACH,OAAO,eAAe;IAC1C,OAAO,IAAI,CAACD,IAAI,CAACU,GAAG,CAAiBN,GAAG,CAAC,CACtCE,IAAI,CACHT,UAAU,CAAC,IAAI,CAACU,WAAW,CAAiB,qBAAqB,EAAE,EAAE,CAAC,CAAC,CACxE;EACL;EAEA;;;;;;EAMQA,WAAWA,CAAIK,SAAS,GAAG,WAAW,EAAEC,MAAU;IACxD,OAAQC,KAAU,IAAmB;MAEnC;MACAC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC,CAAC;MAEtB;MACA,OAAOlB,EAAE,CAACiB,MAAW,CAAC;IACxB,CAAC;EACH;EAAC,QAAAG,CAAA,G;qBA1DUlB,mBAAmB,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAnBvB,mBAAmB;IAAAwB,OAAA,EAAnBxB,mBAAmB,CAAAyB,IAAA;IAAAC,UAAA,EAFlB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}