{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AdminService {\n  constructor(http) {\n    this.http = http;\n    this.adminUrl = 'http://localhost:8080/admin'; // URL to web api\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  //TODO add all controller methods\n  getAccounts() {\n    return this.http.get(this.adminUrl).pipe(tap(_ => catchError(this.handleError('getAccounts', []))));\n  }\n  addNeed(need) {\n    return this.http.post(this.adminUrl, need, this.httpOptions).pipe(tap(newNeed => catchError(this.handleError('addNeed'))));\n  }\n  deleteNeed(needName) {\n    const url = `${this.adminUrl}/${needName}`;\n    return this.http.delete(url, this.httpOptions).pipe(tap(_ => catchError(this.handleError('deleteHero'))));\n  }\n  handleError(operation = 'operation', result) {\n    return error => {\n      //TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      //Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n  static #_ = this.ɵfac = function AdminService_Factory(t) {\n    return new (t || AdminService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AdminService,\n    factory: AdminService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","of","catchError","tap","AdminService","constructor","http","adminUrl","httpOptions","headers","getAccounts","get","pipe","_","handleError","addNeed","need","post","newNeed","deleteNeed","needName","url","delete","operation","result","error","console","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\samue\\SWEN261\\team-project-2231-swen-261-07-7-g-fundsinhighplaces\\ufund-ui\\UFund-Store\\src\\app\\admin.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http'\r\n\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\n\r\nimport { Needs } from './needs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AdminService {\r\n  private adminUrl = 'http://localhost:8080/admin';  // URL to web api\r\n  \r\n  httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n  };\r\n  constructor(\r\n    private http: HttpClient\r\n  ) { }\r\n\r\n    //TODO add all controller methods\r\n\r\n  getAccounts(): Observable<Needs[]> {\r\n    return this.http.get<Needs[]>(this.adminUrl)\r\n      .pipe(\r\n        tap(_ =>catchError(this.handleError<Needs[]>('getAccounts', [])\r\n      )));\r\n  }\r\n\r\n  addNeed(need: Needs): Observable<Needs> {\r\n    return this.http.post<Needs>(this.adminUrl, need, this.httpOptions).pipe(\r\n      tap((newNeed: Needs) => \r\n      catchError(this.handleError<Needs>('addNeed')))\r\n    );\r\n  }\r\n\r\n  deleteNeed(needName: string): Observable<Needs>{\r\n    const url = `${this.adminUrl}/${needName}`;\r\n\r\n    return this.http.delete<Needs>(url, this.httpOptions).pipe(\r\n      tap(_ =>\r\n      catchError(this.handleError<Need>('deleteHero'))\r\n    );\r\n  }\r\n\r\n  private handleError<T>(operation = 'operation', result?: T) {\r\n    return (error: any): Observable<T> => {\r\n\r\n      //TODO: send the error to remote logging infrastructure\r\n      console.error(error); // log to console instead\r\n\r\n      //Let the app keep running by returning an empty result.\r\n      return of(result as T);\r\n    }\r\n  }\r\n}\r\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAAqBC,EAAE,QAAQ,MAAM;AACrC,SAASC,UAAU,EAAOC,GAAG,QAAQ,gBAAgB;;;AAOrD,OAAM,MAAOC,YAAY;EAMvBC,YACUC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IANN,KAAAC,QAAQ,GAAG,6BAA6B,CAAC,CAAE;IAEnD,KAAAC,WAAW,GAAG;MACZC,OAAO,EAAE,IAAIT,WAAW,CAAC;QAAE,cAAc,EAAE;MAAkB,CAAE;KAChE;EAGG;EAEF;EAEFU,WAAWA,CAAA;IACT,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAU,IAAI,CAACJ,QAAQ,CAAC,CACzCK,IAAI,CACHT,GAAG,CAACU,CAAC,IAAGX,UAAU,CAAC,IAAI,CAACY,WAAW,CAAU,aAAa,EAAE,EAAE,CAAC,CAChE,CAAC,CAAC;EACP;EAEAC,OAAOA,CAACC,IAAW;IACjB,OAAO,IAAI,CAACV,IAAI,CAACW,IAAI,CAAQ,IAAI,CAACV,QAAQ,EAAES,IAAI,EAAE,IAAI,CAACR,WAAW,CAAC,CAACI,IAAI,CACtET,GAAG,CAAEe,OAAc,IACnBhB,UAAU,CAAC,IAAI,CAACY,WAAW,CAAQ,SAAS,CAAC,CAAC,CAAC,CAChD;EACH;EAEAK,UAAUA,CAACC,QAAgB;IACzB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACd,QAAQ,IAAIa,QAAQ,EAAE;IAE1C,OAAO,IAAI,CAACd,IAAI,CAACgB,MAAM,CAAQD,GAAG,EAAE,IAAI,CAACb,WAAW,CAAC,CAACI,IAAI,CACxDT,GAAG,CAACU,CAAC,IACLX,UAAU,CAAC,IAAI,CAACY,WAAW,CAAO,YAAY,CAAC,CAAC,CACjD;EACH;EAEQA,WAAWA,CAAIS,SAAS,GAAG,WAAW,EAAEC,MAAU;IACxD,OAAQC,KAAU,IAAmB;MAEnC;MACAC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC,CAAC;MAEtB;MACA,OAAOxB,EAAE,CAACuB,MAAW,CAAC;IACxB,CAAC;EACH;EAAC,QAAAX,CAAA,G;qBA5CUT,YAAY,EAAAuB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAZ3B,YAAY;IAAA4B,OAAA,EAAZ5B,YAAY,CAAA6B,IAAA;IAAAC,UAAA,EAFX;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}