{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { Cupboard } from 'src/app/cupboard.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class FundingBasket {\n  constructor(http) {\n    this.http = http;\n    this.needsUrl = 'http://localhost:8080/helper';\n    this.supportedNeeds = new Map();\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    this.cupboard = new Cupboard(http);\n  }\n  /** GET all needs from the server */\n  getAllNeeds() {\n    return this.http.get(this.needsUrl).pipe(tap(_ => this.log('fetched needs')), catchError(this.handleError('getAllNeeds', [])));\n  }\n  /** POST: add a new need to the server */\n  addNeed(need) {\n    return this.http.post(this.needsUrl, need, this.httpOptions).pipe(tap(newNeed => this.log('added need with name=${newNeed.name}')), catchError(this.handleError('addNeed')));\n  }\n  /** PUT: update the need on the server */\n  updateNeed(need) {\n    const url = '${this.needsUrl}/${need.name}';\n    return this.http.put(url, need, this.httpOptions).pipe(tap(_ => this.log('updated need with name=${need.name}')), catchError(this.handleError('updateNeed')));\n  }\n  /** DELETE: delete the need from the server */\n  deleteNeed(name) {\n    const url = '${this.needsUrl}/${name}';\n    return this.http.delete(url, this.httpOptions).pipe(tap(_ => this.log('deleted need with name=${name}')), catchError(this.handleError('deleteNeed')));\n  }\n  /** GET needs whose name contains search term */\n  searchNeeds(term) {\n    if (!term.trim()) {\n      return of([]);\n    }\n    return this.http.get('${this.needsUrl}/?name=${term}').pipe(tap(x => x.length ? this.log('found needs matching \"${term}\"') : this.log('no needs matching \"${term}\"')), catchError(this.handleError('searchNeeds', [])));\n  }\n  /** GET all supported needs from the server */\n  getSupportedNeeds() {\n    return this.http.get(this.needsUrl).pipe(tap(data => {\n      this.supportedNeeds = data;\n      this.log('fetched supported needs');\n    }), catchError(this.handleError('getSupportedNeeds', new Map())));\n  }\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   *\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  handleError(operation = 'operation', result) {\n    return error => {\n      console.error(error);\n      this.log('${operation} failed: ${error.message}');\n      return of(result);\n    };\n  }\n  /** Log a FundingBasketService message with the MessageService */\n  log(message) {\n    console.log('FundingBasketService: ${message}');\n  }\n  /**\n   * Users add a need to the funding basket\n   *\n   * @param need The need that is being added to the funding basket\n   */\n  addSupportedNeed(need) {\n    return this.http.post(`${this.needsUrl}/addneed`, need, this.httpOptions).pipe(tap(addedNeed => {\n      this.log(`added need with name=${addedNeed.name}`);\n    }), catchError(this.handleError('addSupportedNeed')));\n  }\n  /**\n   * Users can remove a specific need from the funding basket\n   *\n   * @param need The need that is being removed from the funding basket\n   */\n  removeSupportedNeed(name) {\n    const url = `${this.needsUrl}/${name}`;\n    return this.http.delete(url, this.httpOptions).pipe(tap(_ => this.log(`deleted need with name=${name}`)), catchError(this.handleError('removeSupportedNeed')));\n  }\n  /**\n   * Users can check out the needs from the funding basket\n   */\n  checkOut() {\n    for (const need of this.supportedNeeds) {\n      const updateSuccess = this.cupboard.updateNeed(need);\n      if (!updateSuccess) {\n        console.error('Failed to update need ${need.name} in the cupboard.');\n      }\n    }\n    this.supportedNeeds = [];\n  }\n  static #_ = this.ɵfac = function FundingBasket_Factory(t) {\n    return new (t || FundingBasket)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FundingBasket,\n    factory: FundingBasket.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","of","catchError","tap","Cupboard","FundingBasket","constructor","http","needsUrl","supportedNeeds","Map","httpOptions","headers","cupboard","getAllNeeds","get","pipe","_","log","handleError","addNeed","need","post","newNeed","updateNeed","url","put","deleteNeed","name","delete","searchNeeds","term","trim","x","length","getSupportedNeeds","data","operation","result","error","console","message","addSupportedNeed","addedNeed","removeSupportedNeed","checkOut","updateSuccess","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/Users/soulacex/swen-261/team-project-2231-swen-261-07-7-g-fundsinhighplaces/ufund-ui/UFund-Store/src/app/fundingbasket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { Needs } from 'src/app/needs'; \nimport { Cupboard } from 'src/app/cupboard.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FundingBasket {\n  private needsUrl = 'http://localhost:8080/helper';\n  private supportedNeeds: Map<string, number> = new Map();\n  private cupboard: Cupboard;\n\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\n  };\n\n  constructor(private http: HttpClient) {\n    this.cupboard = new Cupboard(http);\n  }\n\n  /** GET all needs from the server */\n  getAllNeeds(): Observable<Needs[]> {\n    return this.http.get<Needs[]>(this.needsUrl).pipe(\n      tap((_) => this.log('fetched needs')),\n      catchError(this.handleError<Needs[]>('getAllNeeds', []))\n    );\n  }\n\n  /** POST: add a new need to the server */\n  addNeed(need: Needs): Observable<Needs> {\n    return this.http.post<Needs>(this.needsUrl, need, this.httpOptions).pipe(\n      tap((newNeed: Needs) => this.log('added need with name=${newNeed.name}')),\n      catchError(this.handleError<Needs>('addNeed'))\n    );\n  }\n\n  /** PUT: update the need on the server */\n  updateNeed(need: Needs): Observable<any> {\n    const url = '${this.needsUrl}/${need.name}';\n    return this.http.put(url, need, this.httpOptions).pipe(\n      tap((_) => this.log('updated need with name=${need.name}')),\n      catchError(this.handleError<any>('updateNeed'))\n    );\n  }\n\n  /** DELETE: delete the need from the server */\n  deleteNeed(name: string): Observable<Needs> {\n    const url = '${this.needsUrl}/${name}';\n\n    return this.http.delete<Needs>(url, this.httpOptions).pipe(\n      tap((_) => this.log('deleted need with name=${name}')),\n      catchError(this.handleError<Needs>('deleteNeed'))\n    );\n  }\n\n  /** GET needs whose name contains search term */\n  searchNeeds(term: string): Observable<Needs[]> {\n    if (!term.trim()) {\n      return of([]);\n    }\n    return this.http.get<Needs[]>('${this.needsUrl}/?name=${term}').pipe(\n      tap((x) => x.length ? this.log('found needs matching \"${term}\"') : this.log('no needs matching \"${term}\"')),\n      catchError(this.handleError<Needs[]>('searchNeeds', []))\n    );\n  }\n\n  /** GET all supported needs from the server */\n  getSupportedNeeds(): Observable<Map<string, number>> {\n    return this.http.get<Map<string, number>>(this.needsUrl).pipe(\n      tap((data) => {\n        this.supportedNeeds = data;\n        this.log('fetched supported needs');\n      }),\n      catchError(this.handleError<Map<string, number>>('getSupportedNeeds', new Map()))\n    );\n  }\n\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   *\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n      console.error(error);\n      this.log('${operation} failed: ${error.message}');\n      return of(result as T);\n    };\n  }\n\n  /** Log a FundingBasketService message with the MessageService */\n  private log(message: string) {\n    console.log('FundingBasketService: ${message}');\n  }\n\n  \n  /**\n   * Users add a need to the funding basket\n   *\n   * @param need The need that is being added to the funding basket\n   */\n   addSupportedNeed(need: Needs): Observable<Needs> {\n    return this.http.post<Needs>(`${this.needsUrl}/addneed`, need, this.httpOptions).pipe(\n      tap((addedNeed: Needs) => {\n        this.log(`added need with name=${addedNeed.name}`);\n      }),\n      catchError(this.handleError<Needs>('addSupportedNeed'))\n    );\n  }\n\n  /**\n   * Users can remove a specific need from the funding basket\n   *\n   * @param need The need that is being removed from the funding basket\n   */\n   removeSupportedNeed(name: string): Observable<Needs> {\n    const url = `${this.needsUrl}/${name}`;\n\n    return this.http.delete<Needs>(url, this.httpOptions).pipe(\n      tap((_) => this.log(`deleted need with name=${name}`)),\n      catchError(this.handleError<Needs>('removeSupportedNeed'))\n    );\n  }\n\n  /**\n   * Users can check out the needs from the funding basket\n   */\n  public checkOut(): void {\n    for (const need of this.supportedNeeds) {\n      const updateSuccess = this.cupboard.updateNeed(need);\n      if (!updateSuccess) {\n        console.error('Failed to update need ${need.name} in the cupboard.');\n      }\n    }\n    this.supportedNeeds = [];\n  }\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}