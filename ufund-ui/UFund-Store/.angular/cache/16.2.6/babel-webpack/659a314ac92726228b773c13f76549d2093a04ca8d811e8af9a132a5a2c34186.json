{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class HelperMessageService {\n  constructor(http) {\n    this.http = http;\n    this.messageUrl = 'http://localhost:8080/message'; // URL to web api\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    // Add your messages here\n    this.messages = [];\n  }\n  addMessage(helperMessage) {\n    return this.http.post(this.messageUrl, helperMessage, this.httpOptions).pipe(tap(newMessage => catchError(this.handleError('addMessage'))));\n  }\n  searchMessageId(Id) {\n    const url = `${this.messageUrl}/${Id}`;\n    return this.http.get(url).pipe(tap(_ => catchError(this.handleError(`getMessage id=${Id}`))));\n  }\n  // Add this method to get a random message\n  getRandomMessage() {\n    const randomIndex = Math.floor(Math.random() * this.messages.length);\n    return this.messages[randomIndex];\n  }\n  handleError(operation = 'operation', result) {\n    return error => {\n      //TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      //Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n  static #_ = this.ɵfac = function HelperMessageService_Factory(t) {\n    return new (t || HelperMessageService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HelperMessageService,\n    factory: HelperMessageService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","of","catchError","tap","HelperMessageService","constructor","http","messageUrl","httpOptions","headers","messages","addMessage","helperMessage","post","pipe","newMessage","handleError","searchMessageId","Id","url","get","_","getRandomMessage","randomIndex","Math","floor","random","length","operation","result","error","console","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/Users/soulacex/swen-261/team-project-2231-swen-261-07-7-g-fundsinhighplaces/ufund-ui/UFund-Store/src/app/helper-message.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http'\n\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\n\nimport { HelperMessage } from './HelperMessage';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HelperMessageService {\n\n  private messageUrl = 'http://localhost:8080/message';  // URL to web api\n\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n\n  // Add your messages here\n  messages: HelperMessage[] = [\n  ];\n\n  constructor( private http: HttpClient) { }\n\n  addMessage(helperMessage: HelperMessage): Observable<HelperMessage>{\n    return this.http.post<HelperMessage>(this.messageUrl, helperMessage, this.httpOptions).pipe(\n      tap((newMessage: HelperMessage) => \n      catchError(this.handleError<HelperMessage>('addMessage')))\n    );\n  }\n\n  searchMessageId(Id: number): Observable<HelperMessage>{\n    const url = `${this.messageUrl}/${Id}`;\n    return this.http.get<HelperMessage>(url).pipe(\n      tap(_=>catchError(this.handleError<HelperMessage>(`getMessage id=${Id}`)))\n    );\n  }\n\n  // Add this method to get a random message\n  getRandomMessage(): HelperMessage {\n    const randomIndex = Math.floor(Math.random() * this.messages.length);\n    return this.messages[randomIndex];\n  }\n\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      //TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      //Let the app keep running by returning an empty result.\n      return of(result as T);\n    }\n  }\n}\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAAqBC,EAAE,QAAQ,MAAM;AACrC,SAASC,UAAU,EAAOC,GAAG,QAAQ,gBAAgB;;;AAOrD,OAAM,MAAOC,oBAAoB;EAY/BC,YAAqBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAVjB,KAAAC,UAAU,GAAG,+BAA+B,CAAC,CAAE;IAEvD,KAAAC,WAAW,GAAG;MACZC,OAAO,EAAE,IAAIT,WAAW,CAAC;QAAE,cAAc,EAAE;MAAkB,CAAE;KAChE;IAED;IACA,KAAAU,QAAQ,GAAoB,EAC3B;EAEwC;EAEzCC,UAAUA,CAACC,aAA4B;IACrC,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAAgB,IAAI,CAACN,UAAU,EAAEK,aAAa,EAAE,IAAI,CAACJ,WAAW,CAAC,CAACM,IAAI,CACzFX,GAAG,CAAEY,UAAyB,IAC9Bb,UAAU,CAAC,IAAI,CAACc,WAAW,CAAgB,YAAY,CAAC,CAAC,CAAC,CAC3D;EACH;EAEAC,eAAeA,CAACC,EAAU;IACxB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACZ,UAAU,IAAIW,EAAE,EAAE;IACtC,OAAO,IAAI,CAACZ,IAAI,CAACc,GAAG,CAAgBD,GAAG,CAAC,CAACL,IAAI,CAC3CX,GAAG,CAACkB,CAAC,IAAEnB,UAAU,CAAC,IAAI,CAACc,WAAW,CAAgB,iBAAiBE,EAAE,EAAE,CAAC,CAAC,CAAC,CAC3E;EACH;EAEA;EACAI,gBAAgBA,CAAA;IACd,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,IAAI,CAAChB,QAAQ,CAACiB,MAAM,CAAC;IACpE,OAAO,IAAI,CAACjB,QAAQ,CAACa,WAAW,CAAC;EACnC;EAEQP,WAAWA,CAAIY,SAAS,GAAG,WAAW,EAAEC,MAAU;IACxD,OAAQC,KAAU,IAAmB;MAEnC;MACAC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC,CAAC;MAEtB;MACA,OAAO7B,EAAE,CAAC4B,MAAW,CAAC;IACxB,CAAC;EACH;EAAC,QAAAR,CAAA,G;qBA3CUjB,oBAAoB,EAAA4B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAApBhC,oBAAoB;IAAAiC,OAAA,EAApBjC,oBAAoB,CAAAkC,IAAA;IAAAC,UAAA,EAFnB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}