{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.accountsUrl = 'http://localhost:8080/account'; // URL to web api\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  getAccounts() {\n    return this.http.get(this.accountsUrl).pipe(tap(_ => catchError(this.handleError('getAccounts', []))));\n  }\n  createUser(account) {\n    return this.http.post(this.accountsUrl, account, this.httpOptions).pipe(tap(newAccount => catchError(this.handleError('createUser'))));\n  }\n  handleError(operation = 'operation', result) {\n    return error => {\n      //TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      //Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","of","catchError","tap","AuthService","constructor","http","accountsUrl","httpOptions","headers","getAccounts","get","pipe","_","handleError","createUser","account","post","newAccount","operation","result","error","console","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\samue\\SWEN261\\team-project-2231-swen-261-07-7-g-fundsinhighplaces\\ufund-ui\\UFund-Store\\src\\app\\auth.service.ts"],"sourcesContent":["import { Injectable, OnInit } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http'\r\n\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\n\r\nimport { helperAccount } from './helperAccount';\r\nimport { UserAccount } from './UserAccount';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService{\r\n\r\n  private accountsUrl = 'http://localhost:8080/account';  // URL to web api\r\n\r\n  httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n  };\r\n  \r\n\r\n  constructor(\r\n    private http: HttpClient\r\n    ) { }\r\n\r\n\r\n  getAccounts(): Observable<UserAccount[]> {\r\n    return this.http.get<UserAccount[]>(this.accountsUrl)\r\n      .pipe(\r\n        tap(_ =>catchError(this.handleError<UserAccount[]>('getAccounts', [])\r\n      )));\r\n  }\r\n\r\n  createUser(account: helperAccount): Observable<helperAccount> {\r\n    return this.http.post<helperAccount>(this.accountsUrl, account, this.httpOptions).pipe(\r\n      tap((newAccount: helperAccount) =>\r\n      catchError(this.handleError<string>('createUser'))\r\n    ));\r\n  }\r\n\r\n  private handleError<T>(operation = 'operation', result?: T) {\r\n    return (error: any): Observable<T> => {\r\n\r\n      //TODO: send the error to remote logging infrastructure\r\n      console.error(error); // log to console instead\r\n\r\n      //Let the app keep running by returning an empty result.\r\n      return of(result as T);\r\n    }\r\n  }\r\n\r\n}\r\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAAqBC,EAAE,QAAQ,MAAM;AACrC,SAASC,UAAU,EAAOC,GAAG,QAAQ,gBAAgB;;;AAQrD,OAAM,MAAOC,WAAW;EAStBC,YACUC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IARN,KAAAC,WAAW,GAAG,+BAA+B,CAAC,CAAE;IAExD,KAAAC,WAAW,GAAG;MACZC,OAAO,EAAE,IAAIT,WAAW,CAAC;QAAE,cAAc,EAAE;MAAkB,CAAE;KAChE;EAKK;EAGNU,WAAWA,CAAA;IACT,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAgB,IAAI,CAACJ,WAAW,CAAC,CAClDK,IAAI,CACHT,GAAG,CAACU,CAAC,IAAGX,UAAU,CAAC,IAAI,CAACY,WAAW,CAAgB,aAAa,EAAE,EAAE,CAAC,CACtE,CAAC,CAAC;EACP;EAEAC,UAAUA,CAACC,OAAsB;IAC/B,OAAO,IAAI,CAACV,IAAI,CAACW,IAAI,CAAgB,IAAI,CAACV,WAAW,EAAES,OAAO,EAAE,IAAI,CAACR,WAAW,CAAC,CAACI,IAAI,CACpFT,GAAG,CAAEe,UAAyB,IAC9BhB,UAAU,CAAC,IAAI,CAACY,WAAW,CAAS,YAAY,CAAC,CAAC,CACnD,CAAC;EACJ;EAEQA,WAAWA,CAAIK,SAAS,GAAG,WAAW,EAAEC,MAAU;IACxD,OAAQC,KAAU,IAAmB;MAEnC;MACAC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC,CAAC;MAEtB;MACA,OAAOpB,EAAE,CAACmB,MAAW,CAAC;IACxB,CAAC;EACH;EAAC,QAAAP,CAAA,G;qBArCUT,WAAW,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXvB,WAAW;IAAAwB,OAAA,EAAXxB,WAAW,CAAAyB,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}