{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.users = [];\n    this.accountsUrl = 'http://localhost:8080/account'; // URL to web api\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  ngOnInit() {\n    this.fillCurrentUsers;\n  }\n  getAccounts() {\n    return this.http.get(this.accountsUrl).pipe(tap(_ => catchError(this.handleError('getHeroes', []))));\n  }\n  fillCurrentUsers() {\n    this.getAccounts().subscribe(UserAccounts => this.users = UserAccounts);\n  }\n  login(username) {\n    let user = this.users.find(u => u.username === username);\n    if (user) {\n      this.session = user;\n      localStorage.setItem('session', JSON.stringify(this.session));\n    }\n    return user;\n  }\n  createUser(account) {\n    return this.http.post(this.accountsUrl, account, this.httpOptions).pipe(tap(newAccount => catchError(this.handleError('createUser'))));\n  }\n  handleError(operation = 'operation', result) {\n    return error => {\n      //TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      //Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","of","catchError","tap","AuthService","constructor","http","users","accountsUrl","httpOptions","headers","ngOnInit","fillCurrentUsers","getAccounts","get","pipe","_","handleError","subscribe","UserAccounts","login","username","user","find","u","session","localStorage","setItem","JSON","stringify","createUser","account","post","newAccount","operation","result","error","console","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\samue\\SWEN261\\team-project-2231-swen-261-07-7-g-fundsinhighplaces\\ufund-ui\\UFund-Store\\src\\app\\auth.service.ts"],"sourcesContent":["import { Injectable, OnInit } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http'\r\n\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\n\r\nimport { helperAccount } from './helperAccount';\r\nimport { UserAccount } from './UserAccount';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService implements OnInit{\r\n  users: UserAccount[] = []\r\n  session: any;\r\n  private accountsUrl = 'http://localhost:8080/account';  // URL to web api\r\n\r\n  httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n  };\r\n  \r\n\r\n  constructor(\r\n    private http: HttpClient\r\n    ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.fillCurrentUsers\r\n  }\r\n\r\n  getAccounts(): Observable<UserAccount[]> {\r\n    return this.http.get<UserAccount[]>(this.accountsUrl)\r\n      .pipe(\r\n        tap(_ =>catchError(this.handleError<UserAccount[]>('getHeroes', [])\r\n      )));\r\n  }\r\n\r\n  fillCurrentUsers(): void{\r\n    this.getAccounts()\r\n    .subscribe(UserAccounts => this.users = UserAccounts);\r\n  }\r\n  \r\n\r\n  login(username: string){\r\n    let user = this.users.find((u)=>u.username===username);\r\n    if(user){\r\n      this.session = user;\r\n      localStorage.setItem('session', JSON.stringify(this.session))\r\n    }\r\n    return user;\r\n  }\r\n\r\n  createUser(account: helperAccount): Observable<helperAccount> {\r\n    return this.http.post<helperAccount>(this.accountsUrl, account, this.httpOptions).pipe(\r\n      tap((newAccount: helperAccount) =>\r\n      catchError(this.handleError<string>('createUser'))\r\n    ));\r\n  }\r\n\r\n  private handleError<T>(operation = 'operation', result?: T) {\r\n    return (error: any): Observable<T> => {\r\n\r\n      //TODO: send the error to remote logging infrastructure\r\n      console.error(error); // log to console instead\r\n\r\n      //Let the app keep running by returning an empty result.\r\n      return of(result as T);\r\n    }\r\n  }\r\n\r\n}\r\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAAqBC,EAAE,QAAQ,MAAM;AACrC,SAASC,UAAU,EAAOC,GAAG,QAAQ,gBAAgB;;;AAQrD,OAAM,MAAOC,WAAW;EAUtBC,YACUC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAVd,KAAAC,KAAK,GAAkB,EAAE;IAEjB,KAAAC,WAAW,GAAG,+BAA+B,CAAC,CAAE;IAExD,KAAAC,WAAW,GAAG;MACZC,OAAO,EAAE,IAAIV,WAAW,CAAC;QAAE,cAAc,EAAE;MAAkB,CAAE;KAChE;EAKK;EAENW,QAAQA,CAAA;IACN,IAAI,CAACC,gBAAgB;EACvB;EAEAC,WAAWA,CAAA;IACT,OAAO,IAAI,CAACP,IAAI,CAACQ,GAAG,CAAgB,IAAI,CAACN,WAAW,CAAC,CAClDO,IAAI,CACHZ,GAAG,CAACa,CAAC,IAAGd,UAAU,CAAC,IAAI,CAACe,WAAW,CAAgB,WAAW,EAAE,EAAE,CAAC,CACpE,CAAC,CAAC;EACP;EAEAL,gBAAgBA,CAAA;IACd,IAAI,CAACC,WAAW,EAAE,CACjBK,SAAS,CAACC,YAAY,IAAI,IAAI,CAACZ,KAAK,GAAGY,YAAY,CAAC;EACvD;EAGAC,KAAKA,CAACC,QAAgB;IACpB,IAAIC,IAAI,GAAG,IAAI,CAACf,KAAK,CAACgB,IAAI,CAAEC,CAAC,IAAGA,CAAC,CAACH,QAAQ,KAAGA,QAAQ,CAAC;IACtD,IAAGC,IAAI,EAAC;MACN,IAAI,CAACG,OAAO,GAAGH,IAAI;MACnBI,YAAY,CAACC,OAAO,CAAC,SAAS,EAAEC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACJ,OAAO,CAAC,CAAC;;IAE/D,OAAOH,IAAI;EACb;EAEAQ,UAAUA,CAACC,OAAsB;IAC/B,OAAO,IAAI,CAACzB,IAAI,CAAC0B,IAAI,CAAgB,IAAI,CAACxB,WAAW,EAAEuB,OAAO,EAAE,IAAI,CAACtB,WAAW,CAAC,CAACM,IAAI,CACpFZ,GAAG,CAAE8B,UAAyB,IAC9B/B,UAAU,CAAC,IAAI,CAACe,WAAW,CAAS,YAAY,CAAC,CAAC,CACnD,CAAC;EACJ;EAEQA,WAAWA,CAAIiB,SAAS,GAAG,WAAW,EAAEC,MAAU;IACxD,OAAQC,KAAU,IAAmB;MAEnC;MACAC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC,CAAC;MAEtB;MACA,OAAOnC,EAAE,CAACkC,MAAW,CAAC;IACxB,CAAC;EACH;EAAC,QAAAnB,CAAA,G;qBAxDUZ,WAAW,EAAAkC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXtC,WAAW;IAAAuC,OAAA,EAAXvC,WAAW,CAAAwC,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}