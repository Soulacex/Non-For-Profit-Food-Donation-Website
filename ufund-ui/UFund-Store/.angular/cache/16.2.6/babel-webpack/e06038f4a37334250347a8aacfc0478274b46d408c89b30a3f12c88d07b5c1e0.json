{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class HelperMessageService {\n  constructor(http) {\n    this.http = http;\n    this.messageUrl = 'http://localhost:8080/message'; // URL to web api\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    this.messages = [];\n  }\n  addMessage(helperMessage) {\n    this.messages.push(helperMessage);\n    return this.http.post(this.messageUrl, helperMessage, this.httpOptions).pipe(tap(newMessage => catchError(this.handleError('addMessage'))));\n  }\n  searchMessageId(Id) {\n    const url = `${this.messageUrl}/${Id}`;\n    return this.http.get(url).pipe(tap(_ => catchError(this.handleError(`getMessage id=${Id}`))));\n  }\n  getAllMessages() {\n    return this.http.get(this.messageUrl).pipe(tap(_ => catchError(this.handleError(`getMessages`))));\n  }\n  getRandomMessage() {\n    const randomIndex = Math.floor(Math.random() * this.messages.length);\n    return this.messages[randomIndex];\n  }\n  handleError(operation = 'operation', result) {\n    return error => {\n      //TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      //Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n  static #_ = this.ɵfac = function HelperMessageService_Factory(t) {\n    return new (t || HelperMessageService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HelperMessageService,\n    factory: HelperMessageService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","of","catchError","tap","HelperMessageService","constructor","http","messageUrl","httpOptions","headers","messages","addMessage","helperMessage","push","post","pipe","newMessage","handleError","searchMessageId","Id","url","get","_","getAllMessages","getRandomMessage","randomIndex","Math","floor","random","length","operation","result","error","console","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\samue\\SWEN261\\team-project-2231-swen-261-07-7-g-fundsinhighplaces\\ufund-ui\\UFund-Store\\src\\app\\helper-message.service.ts"],"sourcesContent":["import { Injectable, OnInit } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http'\r\n\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\n\r\nimport { HelperMessage } from './HelperMessage';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HelperMessageService implements OnInit{\r\n\r\n  private messageUrl = 'http://localhost:8080/message';  // URL to web api\r\n\r\n  httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n  };\r\n\r\n  messages: HelperMessage[] = [];\r\n\r\n  constructor( private http: HttpClient) { }\r\n\r\n  addMessage(helperMessage: HelperMessage): Observable<HelperMessage>{\r\n    this.messages.push(helperMessage); \r\n    return this.http.post<HelperMessage>(this.messageUrl, helperMessage, this.httpOptions).pipe(\r\n      tap((newMessage: HelperMessage) => \r\n      catchError(this.handleError<HelperMessage>('addMessage')))\r\n    );\r\n  }\r\n  \r\n\r\n  searchMessageId(Id: number): Observable<HelperMessage>{\r\n    const url = `${this.messageUrl}/${Id}`;\r\n    return this.http.get<HelperMessage>(url).pipe(\r\n      tap(_=>catchError(this.handleError<HelperMessage>(`getMessage id=${Id}`)))\r\n    );\r\n  }\r\n\r\n  getAllMessages(): Observable<HelperMessage[]>{\r\n    return this.http.get<HelperMessage[]>(this.messageUrl).pipe(\r\n      tap(_=>catchError(this.handleError<HelperMessage[]>(`getMessages`)))\r\n    );\r\n\r\n  }\r\n  getRandomMessage(): HelperMessage {\r\n    const randomIndex = Math.floor(Math.random() * this.messages.length);\r\n    return this.messages[randomIndex];\r\n  }\r\n  \r\n\r\n  private handleError<T>(operation = 'operation', result?: T) {\r\n    return (error: any): Observable<T> => {\r\n\r\n      //TODO: send the error to remote logging infrastructure\r\n      console.error(error); // log to console instead\r\n\r\n      //Let the app keep running by returning an empty result.\r\n      return of(result as T);\r\n    }\r\n  }\r\n}\r\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAAqBC,EAAE,QAAQ,MAAM;AACrC,SAASC,UAAU,EAAOC,GAAG,QAAQ,gBAAgB;;;AAOrD,OAAM,MAAOC,oBAAoB;EAU/BC,YAAqBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IARjB,KAAAC,UAAU,GAAG,+BAA+B,CAAC,CAAE;IAEvD,KAAAC,WAAW,GAAG;MACZC,OAAO,EAAE,IAAIT,WAAW,CAAC;QAAE,cAAc,EAAE;MAAkB,CAAE;KAChE;IAED,KAAAU,QAAQ,GAAoB,EAAE;EAEW;EAEzCC,UAAUA,CAACC,aAA4B;IACrC,IAAI,CAACF,QAAQ,CAACG,IAAI,CAACD,aAAa,CAAC;IACjC,OAAO,IAAI,CAACN,IAAI,CAACQ,IAAI,CAAgB,IAAI,CAACP,UAAU,EAAEK,aAAa,EAAE,IAAI,CAACJ,WAAW,CAAC,CAACO,IAAI,CACzFZ,GAAG,CAAEa,UAAyB,IAC9Bd,UAAU,CAAC,IAAI,CAACe,WAAW,CAAgB,YAAY,CAAC,CAAC,CAAC,CAC3D;EACH;EAGAC,eAAeA,CAACC,EAAU;IACxB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACb,UAAU,IAAIY,EAAE,EAAE;IACtC,OAAO,IAAI,CAACb,IAAI,CAACe,GAAG,CAAgBD,GAAG,CAAC,CAACL,IAAI,CAC3CZ,GAAG,CAACmB,CAAC,IAAEpB,UAAU,CAAC,IAAI,CAACe,WAAW,CAAgB,iBAAiBE,EAAE,EAAE,CAAC,CAAC,CAAC,CAC3E;EACH;EAEAI,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACjB,IAAI,CAACe,GAAG,CAAkB,IAAI,CAACd,UAAU,CAAC,CAACQ,IAAI,CACzDZ,GAAG,CAACmB,CAAC,IAAEpB,UAAU,CAAC,IAAI,CAACe,WAAW,CAAkB,aAAa,CAAC,CAAC,CAAC,CACrE;EAEH;EACAO,gBAAgBA,CAAA;IACd,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,IAAI,CAAClB,QAAQ,CAACmB,MAAM,CAAC;IACpE,OAAO,IAAI,CAACnB,QAAQ,CAACe,WAAW,CAAC;EACnC;EAGQR,WAAWA,CAAIa,SAAS,GAAG,WAAW,EAAEC,MAAU;IACxD,OAAQC,KAAU,IAAmB;MAEnC;MACAC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC,CAAC;MAEtB;MACA,OAAO/B,EAAE,CAAC8B,MAAW,CAAC;IACxB,CAAC;EACH;EAAC,QAAAT,CAAA,G;qBAjDUlB,oBAAoB,EAAA8B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAApBlC,oBAAoB;IAAAmC,OAAA,EAApBnC,oBAAoB,CAAAoC,IAAA;IAAAC,UAAA,EAFnB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}