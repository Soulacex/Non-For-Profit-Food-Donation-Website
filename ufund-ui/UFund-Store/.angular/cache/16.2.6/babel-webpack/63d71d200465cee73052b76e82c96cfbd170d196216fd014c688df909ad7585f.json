{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class Cupboard {\n  constructor(http) {\n    this.http = http;\n    this.cupboardUrl = 'http://localhost:8080/cupboard';\n    this.CupboardList = [];\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  /**\n   * Retrieves all needs from the cupboard.\n   * @returns Observable array of Needs.\n   */\n  getAllcupboardNeeds() {\n    return this.http.get(this.cupboardUrl).pipe(tap(cupboard => this.log('fetched cupboard needs')), catchError(this.handleError('getAllcupboard', [])));\n  }\n  /**\n   * Adds a new need to the cupboard.\n   * @param need The need to be added.\n   * @returns Observable of the added Need.\n   */\n  createNeed(need) {\n    return this.http.post(this.cupboardUrl, need, this.httpOptions).pipe(tap(newNeed => this.log('added need with name=${newNeed.name}')), catchError(this.handleError('createNeed')));\n  }\n  /**\n   * Updates an existing need in the cupboard.\n   * @param need The updated need.\n   * @returns Observable of the updated Need.\n   */\n  updateNeed(need) {\n    const url = `${this.cupboardUrl}/${need.name}`;\n    return this.http.put(url, need, this.httpOptions).pipe(tap(_ => this.log(`updated need with name=${need.name}`)), catchError(this.handleError('updateNeed')));\n  }\n  /**\n   * Deletes a need from the cupboard.\n   * @param name The name of the need to be deleted.\n   * @returns Observable of the deleted Need.\n   */\n  deleteNeed(name) {\n    const url = `${this.cupboardUrl}/${name}`;\n    return this.http.delete(url, this.httpOptions).pipe(tap(_ => this.log(`deleted need with name=${name}`)), catchError(this.handleError('deleteNeed')));\n  }\n  /**\n   * Searches for needs in the cupboard based on a search term.\n   * @param term The search term for filtering needs.\n   * @returns Observable array of Needs that match the search term.\n   */\n  searchNeeds(term) {\n    if (!term.trim()) {\n      return of([]);\n    }\n    return this.http.get(`${this.cupboardUrl}/search?name=${term}`).pipe(tap(x => x.length ? this.log(`found needs matching \"${term}\"`) : this.log(`no needs matching \"${term}\"`)), catchError(this.handleError('searchNeeds', [])));\n  }\n  getNeed(name) {\n    const url = `${this.cupboardUrl}/${name}`;\n    return this.http.get(url).pipe(tap(need => this.log(`fetched need with name=${name}`)), catchError(this.handleError(`getNeed name=${name}`)));\n  }\n  /**\n   * Function that returns all the Needs within the Cupboard\n   * @return Array of all the Needs within the Cupboard\n   **/\n  getCupboard() {\n    return this.CupboardList;\n  }\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   * @returns Observable of the result.\n   */\n  handleError(operation = 'operation', result) {\n    return error => {\n      console.error(error);\n      this.log(`${operation} failed: ${error.message}`);\n      return of(result);\n    };\n  }\n  /**\n   * Log a CupboardService message to the console.\n   * @param message - The message to be logged.\n   */\n  log(message) {\n    console.log(`CupboardService: ${message}`);\n  }\n  static #_ = this.ɵfac = function Cupboard_Factory(t) {\n    return new (t || Cupboard)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: Cupboard,\n    factory: Cupboard.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","of","catchError","tap","Cupboard","constructor","http","cupboardUrl","CupboardList","httpOptions","headers","getAllcupboardNeeds","get","pipe","cupboard","log","handleError","createNeed","need","post","newNeed","updateNeed","url","name","put","_","deleteNeed","delete","searchNeeds","term","trim","x","length","getNeed","getCupboard","operation","result","error","console","message","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\mason\\swen-261\\team-project-2231-swen-261-07-7-g-fundsinhighplaces\\ufund-ui\\UFund-Store\\src\\app\\cupboard.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, tap } from 'rxjs/operators';\r\nimport { Needs } from 'src/app/needs'\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class Cupboard {\r\n  private cupboardUrl = 'http://localhost:8080/cupboard';\r\n  private CupboardList: Needs[] = [];\r\n\r\n  httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\r\n  };\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  /**\r\n   * Retrieves all needs from the cupboard.\r\n   * @returns Observable array of Needs.\r\n   */\r\n  getAllcupboardNeeds(): Observable<Needs[]> {\r\n    return this.http.get<Needs[]>(this.cupboardUrl).pipe(\r\n      tap((cupboard) => this.log('fetched cupboard needs')),\r\n      catchError(this.handleError<Needs[]>('getAllcupboard', []))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Adds a new need to the cupboard.\r\n   * @param need The need to be added.\r\n   * @returns Observable of the added Need.\r\n   */\r\n  createNeed(need: Needs): Observable<Needs> {\r\n    return this.http.post<Needs>(this.cupboardUrl, need, this.httpOptions).pipe(\r\n      tap((newNeed: Needs) => this.log('added need with name=${newNeed.name}')),\r\n      catchError(this.handleError<Needs>('createNeed'))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Updates an existing need in the cupboard.\r\n   * @param need The updated need.\r\n   * @returns Observable of the updated Need.\r\n   */\r\n  updateNeed(need: Needs): Observable<any> {\r\n    const url = `${this.cupboardUrl}/${need.name}`;\r\n    return this.http.put(url, need, this.httpOptions).pipe(\r\n      tap((_) => this.log(`updated need with name=${need.name}`)),\r\n      catchError(this.handleError<any>('updateNeed'))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Deletes a need from the cupboard.\r\n   * @param name The name of the need to be deleted.\r\n   * @returns Observable of the deleted Need.\r\n   */\r\n  deleteNeed(name: string): Observable<Needs> {\r\n    const url = `${this.cupboardUrl}/${name}`;\r\n    return this.http.delete<Needs>(url, this.httpOptions).pipe(\r\n      tap((_) => this.log(`deleted need with name=${name}`)),\r\n      catchError(this.handleError<Needs>('deleteNeed'))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Searches for needs in the cupboard based on a search term.\r\n   * @param term The search term for filtering needs.\r\n   * @returns Observable array of Needs that match the search term.\r\n   */\r\n  searchNeeds(term: string): Observable<Needs[]> {\r\n    if (!term.trim()) {\r\n      return of([]);\r\n    }\r\n    return this.http.get<Needs[]>(`${this.cupboardUrl}/search?name=${term}`).pipe(\r\n      tap((x) => x.length ? this.log(`found needs matching \"${term}\"`) : this.log(`no needs matching \"${term}\"`)),\r\n      catchError(this.handleError<Needs[]>('searchNeeds', []))\r\n    );\r\n  }\r\n\r\n  getNeed(name: string): Observable<Needs> {\r\n    const url = `${this.cupboardUrl}/${name}`;\r\n    return this.http.get<Needs>(url).pipe(\r\n      tap((need: Needs) => this.log(`fetched need with name=${name}`)),\r\n      catchError(this.handleError<Needs>(`getNeed name=${name}`))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Function that returns all the Needs within the Cupboard\r\n   * @return Array of all the Needs within the Cupboard\r\n   **/\r\n   public getCupboard(): Needs[] {\r\n    return this.CupboardList;\r\n  }\r\n\r\n  /**\r\n   * Handle Http operation that failed.\r\n   * Let the app continue.\r\n   * @param operation - name of the operation that failed\r\n   * @param result - optional value to return as the observable result\r\n   * @returns Observable of the result.\r\n   */\r\n  private handleError<T>(operation = 'operation', result?: T) {\r\n    return (error: any): Observable<T> => {\r\n      console.error(error);\r\n      this.log(`${operation} failed: ${error.message}`);\r\n      return of(result as T);\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Log a CupboardService message to the console.\r\n   * @param message - The message to be logged.\r\n   */\r\n  private log(message: string) {\r\n    console.log(`CupboardService: ${message}`);\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}